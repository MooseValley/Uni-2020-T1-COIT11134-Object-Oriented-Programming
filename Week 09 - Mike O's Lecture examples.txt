******************************************************
COIT11134 Object Oriented Programming (2020-T2)
Week: 09
Course Web Page:             https://moodle.cqu.edu.au/course/view.php?id=17401
Course Coordinator:          Farzad Sanati, f.sanati@cqu.edu.au, Townsville
Rocky Teacher (Part-Time):   Mike O'Malley, m.omalley@cqu.edu.au
Mike O'Malley's GitHub:      https://github.com/MooseValley/Uni-2020-T2-COIT11134-Object-Oriented-Programming
Mike O'Malley's Java Videos: http://tinyurl.com/MikesJavaVideos
******************************************************

CLASS STARTING SOON.  :)
* Please feel free to join in via chat window or voice !  :)

ZOOM / Class Recordings:
* Mike O's reminder to himself: Reboot PC before class. Stop CLOUD Recording. Record video locally.
* Students Please Note: Online sessions are recorded for educational purposes.  Recordings may be uploaded to public YouTube, Moodle, Microsoft Teams, and/or other locations.  If you do NOT want to be recorded please turn your webcam and/or microphone OFF during the session. (You can type questions / comments in the chat window).  Your participation will signify your consent to the recording and publication for educational purposes.

ROAD MAP:
Week 01 - Revision of Java, Github review.  Note: Github is mandatory in this course.
Week 02 - Inheritance
Week 03 - Polymorphism
Week 04 - GUI and Event Handling
Week 05 - GUI and Event Handling.  Next week: mid-term break
Week 06 - Exception Handling, and File IO
Week 07 - Interfaces and Inner Classes
Week 08 - Generic methods and classes
Week 09 - Generic classes    <--- YOU ARE HERE !
Week 10 - List and Algorithm
Week 11 - Stacks, Queues and Trees
Week 12 - Final Revision


LAST WEEK:  Week 8
* Week 08 - Generic methods and classes
* Week 09 - Generic classes

THIS WEEK:  Week 9
* Assignment 2
* Assignment 2 spec: read, highlight keywords, partly storyboard.
* MVC - Model View Controller (Wayne's question from 2 weeks ago ?)
* Assignment 2 topics: explore Generics, discuss an Array / ArrayList class strategy, File I/O, maybe typed files, ...



*** Notes:
* none of what I show you below is MANDATORY for Assignment 2 (as far as I can tell) ...
* but it is topics that we have already covered (revision and re-cap), and includes topics that you should be thinking about and strongly considering using in your Assignment 2 work.
* If you apply what I show you below, you will probably end up with a lot less code and a lot less duplication and also a neater, tidier result that is easier to test, debug, understand, modify, and enhance.



Asssignment 2 = Assignment 1 + Accidents + File I/O


Assignment 1
	relatively speaking: a lot of work

Assignment 2
	relatively speaking: a lot less work than Ass 1
	more thinking




Q.  so..., for the search we use 3 jcombobox which is day, month, and year or can we use one single jcombobox to show recorded date?

A. YES
Or they could type in a date - a string - and then search for accidents with that date - string.
04/02/2020

See Week 5 Lecture Notes
SimpleDateFormat object to validate a date



********************************************
*** Assignment 2 GUI
********************************************

Same advice as Ass 1:

Recommend you have 1 JFrame class
and show / hide panels and/or use CardLayout
-> see code and examples in Week 5's lecture.

You *could* use multiple JFrames, but this complicates things a lot.
You need to pass data around, etc.
AVOID !!



********************************************
*** MVC - Model View Controller (Wayne's question from 2 weeks ago ?)
********************************************

We don't officially cover this ...

GUI Class (everything inculuding the kitchen sink)
	Arraylist
	GUI components
	:::
	create gui and activate buttons
	handle button clicks
	load / save / search arraylist
	:::
Instance class
	data ...
	Constructors, Accessors, Mutators, toString, compareTo, etc

Apart from the Instance class ... it is very hard to reuse this design.

A better design:

GUI Class
	create gui and activate buttons
	handle button clicks
ArrayList class
	Arraylist
	load / save / search arraylist
Instance class
	data ...
	Constructors, Accessors, Mutators, toString, compareTo, etc

In this design there is a CLEAR DELINEATION of duties:

* The GUI class handles user interaction and display of results / errors.

* The ArrayList class handles the storage, file I/O, searching, processing of an ArrayList of Instance class objects ...

* The Instance class handles a single object - create, validate, get, set,  toString, compareTo, etc

Advantages:
* Highly re-usable.
* Easier to unit and system test.
* Easier to extend / modify.
* Easier to code / understand.
* Less dependencies, less coupling, lower cohesion ...
* More generic ...

If the ArrayList class is generic, it can be used anytime we need an ArrayList.

If we changed from a GUI app to a Console app, all we should need to change (or replace) is the GUI class - everything else should stay as is.

If we changed from a GUI app to a Web App app, all we should need to change (or replace) is the GUI class - everything else should stay as is.

If we change from storing data in a database instead of files, all we should need to change is the ArrayList class - everything else should stay as is.

If we change the data (add an instance field) all we should need to change is the Instance class and the GUI class (to display / get the new data) - the ArrayList class (if it is coded right i.e. generically) should not need to change.


This is basically what MVC is all about.

* Model: your data classes (your instance classes).
e.g. the instance class in the above example.

* View:  your user interface - getting input, displaying results / errors.  Should not do any real processing.  Just GUI components and buttons hooked up to call methods in the Controller(s) ...
e.g. the GUI class in the above example.

* Controller: the "brains", where the the real processing is done.
e.g. the ArrayList class in the above example.

You can have many Models, many Views, and many Controllers in a single project.

We don't officially cover this ... but it is a great way to design / think about developing software (applications, games, OS's, whatever).




********************************************
*** Generics - ArrayList class strategy
********************************************

Assignment 2

UML Class Diagrams:

------------------------
VehicleArrayList
------------------------
-ArrayList<Vehicle> ....
------------------------
+create
+saveToFile
+loadFromFile
+toString
+search
::: etc

------------------------
OwnerArrayList
------------------------
-ArrayList<Owner> ....
------------------------
+create
+saveToFile
+loadFromFile
+toString
+search
::: etc


And so on for Accident ... 3 ArrayList classes and they are virtually 100% identical.

The SAME functionality !  The same requirements !

Ding ding ding .... GENERIC CLASSES / GENERIC METHODS !!!


Some problems for you to solve ... *YOU* need to think / explore / work out the solutions !

Let's look at one problem to get you started and thinking along the right track ...

* SEARCH

How are you going to tell the generic search() method to search by ownerName (or whatever) when it is for Owners, and for vehicle license plate (or whatever) when it is Vehicles, and so on ?

Various ways to do this !

How about instanceof ???

public int search (String searchStr)
{
	::::
	String compareStr = "";
	if (object instanceof Owner)
		compareStr = ((Owner) object).getOwnerName(); // or whaveter
   else if (object instanceof Vehicle)
   	:::
	:::
}

A bit ugly ...  for each data class you would need to add an else if ....  Boooo !!!  Ugly !  Hisss !!!!!


Or, add a method to each Instance Class (Vehicle, Owner, etc)
getSearchTerm().  You could make this a mandatory method for data classes IF you are going to create an Generic ArrayList class object of them.  How do you make it mandatory ??

HINT: What about Interface class ???  Or Abstract class ???
(That is part of what these classes are for !!!)

All of these things fit together - like a jigsaw.

There is a reason why we cover these topics.

If you are using Generic Classes and Generic Methods, then Abstract Classes, Interface Classes, etc are often very useful !


Recommendations:
* Create a basic Generic ArrayList class with Constructor and search only
* create objects of ArrayListClass<Vehicle> and ...<Owner> and try and do a search
* and you will see what I mean above - the class needs to know what to search for for each type of data.






********************************************
*** File I/O
********************************************

// Pseudo-code - read a data file into ArrayList of objects ...
open file
loop until EOF
	read a line of data
	split it up into an array of String fields.
	e.g. String[] arr = str.split ("\t");
	create an object (Vehicle, Owner, whatever) - call Constructor ...
	add object to arraylist
close file

Why not add a Constructor to your class that takes a String of tab separated data and create an object based on that String ?


// Pseudo-code - read a data file into ArrayList of objects ...
open file
loop until EOF
	read a line of data
	create an object - call Constructor with tab separated data
	add object to arraylist
close file

In this way, your Instance class is taking care of the processing.
Instance class becomes more powerful, more useful.

Now let's look at writing:

// Pseudo-code - write data file from ArrayList of objects ...
open file
loop until EOD
	get object from arraylist
	get name, make, model, etc ....
	create output tab separated
	append it to file
close file

But this code is a lot like the code that displays all of the objects in an TextArea:

loop until EOD
	get object from arraylist
	get name, make, model, etc ....
	create output tab separated
	append it TextArea

Can you create a method in your class that returns the data tab separated ?  toString() ?  Or create another method toStringTabSeparated () ...

You can then shorten your code down and save duplication:

loop until EOF
	get object from arraylist
	append tab separated data to file ... TextArea ... whatever

Cool ???


These are all just suggestions for things you can consider to make your code shorter, simpler
... if you feel up to the challenge !!

Q. I have a question for File IO, let's say I write my whole arraylist and I want to delete specific data in the arraylist, do we have a shortcut to delete a specific line without copying the whole file to a new file?

A. Add / Delete data to / from arraylist, and then when user exits application, save to file.




********************************************
*** File I/O - Typed Files
********************************************

We don't officially cover this ...

And the Assignment 2 Spec says "... writing the data to appropriate text files ...".

Typed Files are NOT TEXT files.  They are BINARY files.

But you can use them, if you want.

Typed Files allow you to just write / read objects to file.
No need to convert data to String and tab separate it or whatever.

// Write:
Vehicle vehicle1 = new Vehicle (::::);
Vehicle vehicle2 = new Vehicle (::::);
FileOutputStream   fos = null;
ObjectOutputStream oos = null;

try
{
	fos = new FileOutputStream   ("myfile.dat");
	oos = new ObjectOutputStream (fos);

	oos.writeObject (vehicle1);
	oos.writeObject (vehicle2);
}
catch (....)
{
	:::
}
finally
{
	// Students: close what else ?  try ?  catch ? Check for nulls ?
	// They must be closed in the right order -- oos first and then fos.
	if (oos != null)
		oos.close();
	if (fos != null)
		fos.close();
	:::
}


// Read:
Vehicle vehicle1;
Vehicle vehicle2;
FileInputStream   fis = null;
ObjectInputStream ois = null;

try
{
	fis = new FileInputStream   ("myfile.dat");
	ois = new ObjectInputStream (fis);

	Object obj = ois.readObject();
	if (obj instanceof Vehicle)
	{
		vehicle1 = (Vehicle) obj;
	}

	Object obj = ois.readObject();
	if (obj instanceof Vehicle)
	{
		vehicle2 = (Vehicle) obj;
	}
}
catch(Exception ex)
{
	:::
}
finally
{
	// Students: close what else ?  try ?  catch ? Check for nulls ?
	oos.close();
	:::
}



But this works for data structures - like ArrayLists - of objects as well !!!
(try, catch, etc removed - just showing the bare bones code)


	ArrayList<Vehicle> vehicleArrayList   = new ArrayList<Vehicle> ();
	::::

	FileOutputStream   fos = new FileOutputStream   ("myfile.dat");
	ObjectOutputStream oos = new ObjectOutputStream (fos);

	oos.writeObject (vehicleArrayList);

	oos.close();
	fos.close();
	:::


You can read / write an entire ArrayList of objects (and other data structures) with a single read / write statement !

Amazing ??


Draw backs (and they are all pretty minor) are:

* you cannot drag your file into TextPad and understand all of the data .. it will contain strange binary characters, etc.

* if the file is damaged / corrupted, it can be harder to recover data because of the binary chars.
You might need to write code to extract and recover what data you can ...

* We should really talk about some other "advanced topics" such as serializable, ...  if we are going to talk about typed files.

* If you're feeling confident and looking for an extra challenge that will reduce your code down ...












Any questions about anything course or assignment related ?

Anything else you want to explore ?

Anything you aren't sure of ?
(You are probably going to need to explore / think about what we have covered above).

Want to write some code together ?


*** Develop GUI with Generic ArrayList class, interface, and instance class,
along with all students in the class.
Ref:
	Week 09/ArrayListGeneric.java
	Week 09/ArrayListGenericInterface.java
	Week 09/Zoo.java
	Week 09/Zooniverse.java


Final note to students:
* If anything I've covered today is too difficult or confusing, use whatever methods you are most comfortable with.
* Basic file I/O, writing tabbed separated data to file is fine !
* The Ass 2 spec does NOT say that you MUST use Interface Classes, Abstract Classes, Generic Classes, etc ... they are NOT mandatory, but it would sure be nice if you did.  :)
* Start with a smallest part of the Assignment 2 problem and solve that, get that working, and then focus on the next small part of the Assignment 2 problem and solve that, get that working, and so on.


EOF.
