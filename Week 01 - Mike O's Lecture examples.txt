******************************************************
COIT11134 Object Oriented Programming (2020-T2)
Week: 01
Course Web Page:             https://moodle.cqu.edu.au/course/view.php?id=17401
Course Coordinator:          Farzad Sanati, f.sanati@cqu.edu.au, Townsville
Rocky Teacher (Part-Time):   Mike O'Malley, m.omalley@cqu.edu.au
Mike O'Malley's GitHub:      https://github.com/MooseValley/Uni-2020-T2-COIT11134-Object-Oriented-Programming
Mike O'Malley's Java Videos: http://tinyurl.com/MikesJavaVideos
Textbook:	Core Java Volume I--Fundamentals, 11th Edition by Cay S. Horstmann
******************************************************

CLASS STARTING SOON.  :)
* Please feel free to join in via chat window or voice !  :)

ZOOM / Class Recordings:
* Mike O's reminder to himself: Reboot PC before class. Stop CLOUD Recording. Record video locally.
* Students Please Note: Online sessions are recorded for educational purposes.  Recordings may be uploaded to public YouTube, Moodle, Microsoft Teams, and/or other locations.  If you do NOT want to be recorded please turn your webcam and/or microphone OFF during the session. (You can type questions / comments in the chat window).  Your participation will signify your consent to the recording and publication for educational purposes.

ROAD MAP:
Week 01 - Revision of Java, Github review.  Note: Github is mandatory in this course.    <--- YOU ARE HERE !
Week 02 - Inheritance
Week 03 - Polymorphism
Week 04 - GUI and Event Handling
Week 05 - GUI and Event Handling.  Next week: mid-term break
Week 06 - Exception Handling, and File IO
Week 07 - Interfaces and Inner Classes
Week 08 - Generic methods and classes
Week 09 - Generic classes
Week 10 - List and Algorithm
Week 11 - Stacks, Queues and Trees
Week 12 - Final Revision


THIS WEEK:  Week 1
* Week 01 - Revision of Java, Github review.  Note: Github is mandatory in this course.


If Netbeans projects  -> Netbeans


Weekly Exercise and Assignment

public class FryingPanWorlds

FryingPanWorlds.java

NO:		Frying_Pan_Worlds

public void methodName (...)
int myCounter ...

public static final int MAX_TEMPERATURE_C = 40;
public static final String APP_NAME       = "My App v0.001";



Acessors / Getters
getname()
getSalary()


Mutators / Setter
setName ()
raiseSalary ()


public Employee (String n)
{
   //name = n;
   //salary = 0;
   //hireDay = null;
   this (n, 0, 1970, 01, 01);
}


Employee teenie = new Employee ("Teenie", 50, 2020, 02, 15);
Employee mike   = new Employee ("Mike O");

mike.raiseSalary (1.3);


nstance
- example of
- an object of
- mike is an object of type Employee


::::
public double salary;
::::

mike.salary = 500;

for (int k = 0; k = 100; k++)
	mike.salary = mike.salary + 500;

if (date.compareTo (LocalDate.of (2020,07, 15) == 0)
	mike.salary += 500;


Keep your data private unless there is VERY GOOD reason for it to be public.
Keep your methods private unless there is good reason for them to be public.



public class Product
{
  private double price = 10.0;

}

public class Product
{
  private static double DEFAULT_PRICE = 10.0;

  private double price = DEFAULT_PRICE;

}

public class Product
{
  private static double DEFAULT_PRICE = 10.0;

  private double price;

  public Product ()
  {
      price = DEFAULT_PRICE;
  }

}


  public static double getMaxWhatever ()
  {
    // Do NOT have a this
    return salary; // ERROR
    return this.salary; // ERROR
  }

double val = Employee.getMaxWhatever ();


public void setName (String n)
{
   name = n;
}

public void setName (String name)
{
   this.name = name;
}

Only instance methods can access instance data (salary, name, hireDate).
Static data and methods are shared amongs all class objects.


public ClassName (:::::)
{
}




public class ClassName
{
  public ClassName ()
  {
     :::
  }

  public ClassName (String name)
  {
     :::
  }
}

ClassName c1 = new ClassName (); // ERROR until you add a DC
ClassName c1 = new ClassName ("Mike");




*** UML Class Diagram:

-------------------------------
FixedAccount
-------------------------------
-accountNumber: numeric
-periodInYears: numeric
:::
-------------------------------
+toString(): String
-------------------------------

Key: - = private, + = public


public class FixedAccount
{
   private static int numberOfAccounts = 0;

   private int accountNumber;
   :::

   public FixedAccount ()
   {
     this (0, 0, 0);
   }

   public FixedAccount (int accountNumber, .....)
   {

      this.accountNumber = accountNumber;
      :::
      numberOfAccounts++;
   }

   ::::

   public int getAccountNumber ()
   {
      return accountNumber;
   }

   ::::

   ::::


   public static int getNumberOfAccounts ()
   {
      return numberOfAccounts;
   }

   public static int getAccountID ()
   {
   	return accountNumber; // ERROR
   }


   public void setAccountNumber (int accountNumber)
   {
      if (accountNumber < 0)
         // ERROR ... display
      else
         this.accountNumber = accountNumber;
   }

   ::::

   ::::


   public String toString()
   {
     return accountNumber + "\t" + ......;
   }
}


FixedAccount acc1 = new FixedAccount ();
FixedAccount acc2 = new FixedAccount (44, ....);

Overloading
Polymorphism

EOF.
