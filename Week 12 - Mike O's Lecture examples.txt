******************************************************
COIT11134 Object Oriented Programming (2020-T2)
Week: 12
Course Web Page:             https://moodle.cqu.edu.au/course/view.php?id=17401
Course Coordinator:          Farzad Sanati, f.sanati@cqu.edu.au, Townsville
Rocky Teacher (Part-Time):   Mike O'Malley, m.omalley@cqu.edu.au
Mike O'Malley's GitHub:      https://github.com/MooseValley/Uni-2020-T2-COIT11134-Object-Oriented-Programming
Mike O'Malley's Java Videos: http://tinyurl.com/MikesJavaVideos
******************************************************

CLASS STARTING SOON.  :)
* Please feel free to join in via chat window or voice !  :)

ZOOM / Class Recordings:
* Mike O's reminder to himself: Reboot PC before class. Stop CLOUD Recording. Record video locally.
* Students Please Note: Online sessions are recorded for educational purposes.  Recordings may be uploaded to public YouTube, Moodle, Microsoft Teams, and/or other locations.  If you do NOT want to be recorded please turn your webcam and/or microphone OFF during the session. (You can type questions / comments in the chat window).  Your participation will signify your consent to the recording and publication for educational purposes.

ROAD MAP:
Week 01 - Revision of Java, Github review.  Note: Github is mandatory in this course.
Week 02 - Inheritance
Week 03 - Polymorphism
Week 04 - GUI and Event Handling
Week 05 - GUI and Event Handling.  Next week: mid-term break
Week 06 - Exception Handling, and File IO
Week 07 - Interfaces and Inner Classes
Week 08 - Generic methods and classes
Week 09 - Generic classes
Week 10 - List and Algorithm
Week 11 - Stacks, Queues and Trees
Week 12 - Final Revision    <--- YOU ARE HERE !


THIS WEEK:  Week 12
* Week 12 - Final Revision
* Discuss the Sample / Practice Exam and then the most recent Past Exam
--> Make sure you have worked through these *before* class
--> NO SOLUTIONS given - just plenty of hints, tips, what if's to get you thinking and on the right track
--> Sample / Practice Exam solutions
----> see Mike O'Malley's Java Videos: http://tinyurl.com/MikesJavaVideos
** If you want me to do a new video to work through any Sample / Practice Exam questions that aren't on my YouTube already -> let me know.
** Bring along your questions
** Bring along your issues, confusions, etc



Compare Interface Classes and Abstract Classes ?
5


public .... .... myMethod(....) //throws .....



public MyClass()
{
    // A comment
    super(....);

    ::::::

}

Person
Employee extends Person
Manager extends Employee

Manager frankie = new Manager();

if (frankie instanceof Manager)
	::::
frankie instanceof Employee
frankie instanceof Person
frankie instanceof Object



public ...... MyInterface extends ....

A.Q.9
public class MyClass implements Comparable, ActionListener,  Serializable


public void .....
{
	 // Is ??? Mandatory, optional, or NOT allowed ??
    ???? class MyClass
    {
    }
}


try
{
}
catch (Exception err)
{
}
catch (ioexception | numberformatexception arr)
{
}
catch (NumberFormatException err) // NO !!!
{
}
finally
{
}



Part B

Q1

this.soilPH = soilPH; // Parameterised Constructor missing line


if (..........)
	return true;
else
	return false;


return "PH: " + soilPH + " is optimum for gardening: " + isOptimum ....



Q2
JFrame
JLabel
JTextField
JSpinEdit
JButton
JPanel



Q3

User Input - NO !!


Assume public and int

// BEST Answer - does what the question asks:
public int divideNumbers(int first, int second) throws ZeroDivisorException
{
	try
	{
	   int val = first / second;
	}
	catch (ArithmeticException err)
	{
	  throw new ZeroDivisorException("second number is zero");
	}

	return 0; ???
}

// No so good answer: does not divide first by second - which the questions asks
public int divideNumbers(int first, int second) throws ZeroDivisorException
{
	if (second == 0)
	  throw new ZeroDivisorException("second number is zero");

	return 0; ???
}


Q4.

public House (int bedRooms, String address) { //parameterised constructor
    super(address);
    this.bedRooms = bedRooms;
}

@Override
public String toString() // House
{
	// Is this correct ????
   return super().toString()  + " It has " + bedRooms + " bed rooms.";
}



Q5.

Interfaces / Abstracts classes

// Measurable Interface
public interface Measureable{

double calculateProfit();

}

// ItemSale class:
@Override
public double calculateProfit()
{
	return salePrice - purchaseCost;
}

@Override
public String toString()
{
	return salePrice - purchaseCost;
}


Q6.

Generic methods
Generic classes
-> whole bunch of rules and limitations about what you can do

Type erasure

<T extends Number>

T fred;
Cannot be used to extend the Exceptions classes


Q7
LIFO

After push() inPacket contains:

	Physical
	::::
	Application

peek
pop


outPacket

	Presentation
	:::
	Presentation
	Physical

First output loop (inPacket)
	Application

Second output loop (outPacket)
	Presentation
	:::
	Presentation
	Physical


Output is:
	Application
	Presentation
	:::
	Presentation
	Physical


Q8

line 8: numTrees+ ? numTrees++;

line 20: public int getNumTrees() ? public static int getNumTrees();

line 32: Tree backyardTree1 = new Tree(Lemon) ? Tree backyardTree1 = new Tree ("Lemon");
I just got this three



2019-T1


Q1.


public class UndergradStudent extends .....
{
   @Override
   public String calculateGrade()
   {
       // Which will work ???
       if (marks >= 85)  // OR
       if (getMarks() >= 85)
          return "HD";
       else if (::::::)
          return ????;
       else if (::::::)
          return ????;
       :::
   }


   @Override
   public String toString()
   {
      return super().toString() +
         " with a grade of " + ?????;
   }
}


Q3.

public class ..... extends JFrame .....
{
   public ???? ()
   {
      :::

      ExitListener exitListener = new ExitListener();
      exitButton.addActionListener (exitListener);

   }


   private class ExitListener extends ActionListener .....
   {
      public void action????? (?????)
      {
          System.exit(0);
      }
   }

}

Q5.

Vehicle
	Car
		Sportscar
	Truck
		HeavyGoods
		SemiTrailer



Q6.

public <T ???> ???? calculateTotal (T[] numbers)
{
  T total = 0;

  for (int k = 0; k < numbers.length; k++)
  {
     total += numbers[k];
  }

  return total;
}


Integer[] ints = {4, 2, 99, 12};
Double[] doubles = {4.0, 2.6, 99.77, 12.3};


Q7.

public class Employee implements Payable
{
   :::
   public double getSalary()
   {
      return salary;
   }

   public double amountPayable()
   {
      return getSalary();
   }
}


BQ2.

Ron
Harry
Hermoine
Ginny



EOF.
